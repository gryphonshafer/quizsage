[%
    page.title = 'Scoreboard Room ' _ room_number;
    page.js.defer.push('util/websocket');
    page.js.defer.push('util/cookies');

    IF quiz;
        page.vue   = 1;
        page.demi  = 1;
        page.pinia = 1;

        js_app_config = quiz.js_app_config('board');

        page.js.importmap = js_app_config.importmap;
        page.js.module    = page.js.module.merge( js_app_config.module );
    END;
%]

[% UNLESS quiz %]
    <p>
        There is currently no active quiz for room [% room_number %] for the
        selected meet. This page will automatically reload when there's
        scoreboard data to display.
    </p>

    [% preboard_load = BLOCK %]
        window.addEventListener( 'load', () => {
            const url = new URL( window.location.href );
            omniframe.websocket.start({
                path      : url.pathname + url.search,
                onmessage : () => window.location.reload(),
            });
        } );
    [% END %]
    [% page.js.inline.push(preboard_load) %]
[% ELSE %]
    [% no_page_page = 1 %]

    <div id="board" v-cloak></div>

    [% board_events = BLOCK %]
        async function wait_for_table_render() {
            const selector = 'div#board table:first-child';
            while ( ! window.document.querySelector(selector) ) {
                await new Promise( resolve => requestAnimationFrame(resolve) );
            }
            return window.document.querySelector(selector);
        }

        window.addEventListener( 'load', () => {
            wait_for_table_render().then( () => window.dispatchEvent( new Event('resize') ) );
        } );

        window.addEventListener( 'resize', () => {
            wait_for_table_render().then( table => {
                const tr         = table.querySelector('tbody tr.selected');
                const board      = window.document.querySelector('div#board');
                const board_rect = board.getBoundingClientRect();

                if ( tr && board.scrollHeight > parseInt( board_rect.bottom - board_rect.top ) + 1 ) {
                    const tr_rect      = tr.getBoundingClientRect();
                    const tr_height    = tr_rect.bottom - tr_rect.top;
                    const rows_visible =
                        (
                            board_rect.bottom -
                            table.querySelector('thead').getBoundingClientRect().bottom
                        ) / tr_height;

                    board.scrollTop =
                        parseInt( tr_rect.bottom - board_rect.bottom ) +
                        tr_height * ( rows_visible - 1 ) / 3;
                }
                else {
                    board.scrollTop = board.scrollHeight;
                }
            } );
        } );
    [% END %]
    [% page.js.inline.push(board_events) %]

    [% click_events = BLOCK %]
        let html_class_list;
        let settings;
        const themes = [ 'light', 'dark', 'sand', 'midnight' ];

        window.addEventListener( 'load', () => {
            html_class_list = window.document.querySelector('html').classList;
            settings = omniframe.cookies.get('quizsage_scoreboard') || {};
            if ( settings && settings.theme ) html_class_list.add( 'theme-' + settings.theme );
        } );

        window.addEventListener( 'click', () => {
            let found_class_name;

            html_class_list.forEach( class_name => {
                if ( class_name.indexOf( 'theme-' ) != -1 ) {
                    html_class_list.remove(class_name);
                    found_class_name = class_name.substr(6);
                }
            } );

            let theme_index = themes.findIndex( name => name == found_class_name );
            theme_index++;
            if ( theme_index >= themes.length ) theme_index = 0;

            html_class_list.add( 'theme-' + themes[theme_index] );

            settings.theme = themes[theme_index];
            omniframe.cookies.set( 'quizsage_scoreboard', settings );
        } );
    [% END %]
    [% page.js.inline.push(click_events) %]
[% END %]
